/*
Copyright 2024 Rancher Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	v1alpha1 "github.com/rancher/helm-project-operator/pkg/apis/helm.cattle.io/v1alpha1"
	"github.com/rancher/lasso/pkg/client"
	"github.com/rancher/lasso/pkg/controller"
	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	"github.com/rancher/wrangler/pkg/kv"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

type ProjectHelmChartHandler func(string, *v1alpha1.ProjectHelmChart) (*v1alpha1.ProjectHelmChart, error)

type ProjectHelmChartController interface {
	generic.ControllerMeta
	ProjectHelmChartClient

	OnChange(ctx context.Context, name string, sync ProjectHelmChartHandler)
	OnRemove(ctx context.Context, name string, sync ProjectHelmChartHandler)
	Enqueue(namespace, name string)
	EnqueueAfter(namespace, name string, duration time.Duration)

	Cache() ProjectHelmChartCache
}

type ProjectHelmChartClient interface {
	Create(*v1alpha1.ProjectHelmChart) (*v1alpha1.ProjectHelmChart, error)
	Update(*v1alpha1.ProjectHelmChart) (*v1alpha1.ProjectHelmChart, error)
	UpdateStatus(*v1alpha1.ProjectHelmChart) (*v1alpha1.ProjectHelmChart, error)
	Delete(namespace, name string, options *metav1.DeleteOptions) error
	Get(namespace, name string, options metav1.GetOptions) (*v1alpha1.ProjectHelmChart, error)
	List(namespace string, opts metav1.ListOptions) (*v1alpha1.ProjectHelmChartList, error)
	Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error)
	Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.ProjectHelmChart, err error)
}

type ProjectHelmChartCache interface {
	Get(namespace, name string) (*v1alpha1.ProjectHelmChart, error)
	List(namespace string, selector labels.Selector) ([]*v1alpha1.ProjectHelmChart, error)
	AddIndexer(indexName string, indexer ProjectHelmChartIndexer)
	GetByIndex(indexName, key string) ([]*v1alpha1.ProjectHelmChart, error)
}

type ProjectHelmChartIndexer func(obj *v1alpha1.ProjectHelmChart) ([]string, error)

type projectHelmChartController struct {
	controller    controller.SharedController
	client        *client.Client
	gvk           schema.GroupVersionKind
	groupResource schema.GroupResource
}

func NewProjectHelmChartController(gvk schema.GroupVersionKind, resource string, namespaced bool, controller controller.SharedControllerFactory) ProjectHelmChartController {
	c := controller.ForResourceKind(gvk.GroupVersion().WithResource(resource), gvk.Kind, namespaced)
	return &projectHelmChartController{
		controller: c,
		client:     c.Client(),
		gvk:        gvk,
		groupResource: schema.GroupResource{
			Group:    gvk.Group,
			Resource: resource,
		},
	}
}

func FromProjectHelmChartHandlerToHandler(sync ProjectHelmChartHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v1alpha1.ProjectHelmChart
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v1alpha1.ProjectHelmChart))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *projectHelmChartController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v1alpha1.ProjectHelmChart))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdateProjectHelmChartDeepCopyOnChange(client ProjectHelmChartClient, obj *v1alpha1.ProjectHelmChart, handler func(obj *v1alpha1.ProjectHelmChart) (*v1alpha1.ProjectHelmChart, error)) (*v1alpha1.ProjectHelmChart, error) {
	if obj == nil {
		return obj, nil
	}

	copyObj := obj.DeepCopy()
	newObj, err := handler(copyObj)
	if newObj != nil {
		copyObj = newObj
	}
	if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
		return client.Update(copyObj)
	}

	return copyObj, err
}

func (c *projectHelmChartController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controller.RegisterHandler(ctx, name, controller.SharedControllerHandlerFunc(handler))
}

func (c *projectHelmChartController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	c.AddGenericHandler(ctx, name, generic.NewRemoveHandler(name, c.Updater(), handler))
}

func (c *projectHelmChartController) OnChange(ctx context.Context, name string, sync ProjectHelmChartHandler) {
	c.AddGenericHandler(ctx, name, FromProjectHelmChartHandlerToHandler(sync))
}

func (c *projectHelmChartController) OnRemove(ctx context.Context, name string, sync ProjectHelmChartHandler) {
	c.AddGenericHandler(ctx, name, generic.NewRemoveHandler(name, c.Updater(), FromProjectHelmChartHandlerToHandler(sync)))
}

func (c *projectHelmChartController) Enqueue(namespace, name string) {
	c.controller.Enqueue(namespace, name)
}

func (c *projectHelmChartController) EnqueueAfter(namespace, name string, duration time.Duration) {
	c.controller.EnqueueAfter(namespace, name, duration)
}

func (c *projectHelmChartController) Informer() cache.SharedIndexInformer {
	return c.controller.Informer()
}

func (c *projectHelmChartController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *projectHelmChartController) Cache() ProjectHelmChartCache {
	return &projectHelmChartCache{
		indexer:  c.Informer().GetIndexer(),
		resource: c.groupResource,
	}
}

func (c *projectHelmChartController) Create(obj *v1alpha1.ProjectHelmChart) (*v1alpha1.ProjectHelmChart, error) {
	result := &v1alpha1.ProjectHelmChart{}
	return result, c.client.Create(context.TODO(), obj.Namespace, obj, result, metav1.CreateOptions{})
}

func (c *projectHelmChartController) Update(obj *v1alpha1.ProjectHelmChart) (*v1alpha1.ProjectHelmChart, error) {
	result := &v1alpha1.ProjectHelmChart{}
	return result, c.client.Update(context.TODO(), obj.Namespace, obj, result, metav1.UpdateOptions{})
}

func (c *projectHelmChartController) UpdateStatus(obj *v1alpha1.ProjectHelmChart) (*v1alpha1.ProjectHelmChart, error) {
	result := &v1alpha1.ProjectHelmChart{}
	return result, c.client.UpdateStatus(context.TODO(), obj.Namespace, obj, result, metav1.UpdateOptions{})
}

func (c *projectHelmChartController) Delete(namespace, name string, options *metav1.DeleteOptions) error {
	if options == nil {
		options = &metav1.DeleteOptions{}
	}
	return c.client.Delete(context.TODO(), namespace, name, *options)
}

func (c *projectHelmChartController) Get(namespace, name string, options metav1.GetOptions) (*v1alpha1.ProjectHelmChart, error) {
	result := &v1alpha1.ProjectHelmChart{}
	return result, c.client.Get(context.TODO(), namespace, name, result, options)
}

func (c *projectHelmChartController) List(namespace string, opts metav1.ListOptions) (*v1alpha1.ProjectHelmChartList, error) {
	result := &v1alpha1.ProjectHelmChartList{}
	return result, c.client.List(context.TODO(), namespace, result, opts)
}

func (c *projectHelmChartController) Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error) {
	return c.client.Watch(context.TODO(), namespace, opts)
}

func (c *projectHelmChartController) Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (*v1alpha1.ProjectHelmChart, error) {
	result := &v1alpha1.ProjectHelmChart{}
	return result, c.client.Patch(context.TODO(), namespace, name, pt, data, result, metav1.PatchOptions{}, subresources...)
}

type projectHelmChartCache struct {
	indexer  cache.Indexer
	resource schema.GroupResource
}

func (c *projectHelmChartCache) Get(namespace, name string) (*v1alpha1.ProjectHelmChart, error) {
	obj, exists, err := c.indexer.GetByKey(namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(c.resource, name)
	}
	return obj.(*v1alpha1.ProjectHelmChart), nil
}

func (c *projectHelmChartCache) List(namespace string, selector labels.Selector) (ret []*v1alpha1.ProjectHelmChart, err error) {

	err = cache.ListAllByNamespace(c.indexer, namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProjectHelmChart))
	})

	return ret, err
}

func (c *projectHelmChartCache) AddIndexer(indexName string, indexer ProjectHelmChartIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v1alpha1.ProjectHelmChart))
		},
	}))
}

func (c *projectHelmChartCache) GetByIndex(indexName, key string) (result []*v1alpha1.ProjectHelmChart, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	result = make([]*v1alpha1.ProjectHelmChart, 0, len(objs))
	for _, obj := range objs {
		result = append(result, obj.(*v1alpha1.ProjectHelmChart))
	}
	return result, nil
}

type ProjectHelmChartStatusHandler func(obj *v1alpha1.ProjectHelmChart, status v1alpha1.ProjectHelmChartStatus) (v1alpha1.ProjectHelmChartStatus, error)

type ProjectHelmChartGeneratingHandler func(obj *v1alpha1.ProjectHelmChart, status v1alpha1.ProjectHelmChartStatus) ([]runtime.Object, v1alpha1.ProjectHelmChartStatus, error)

func RegisterProjectHelmChartStatusHandler(ctx context.Context, controller ProjectHelmChartController, condition condition.Cond, name string, handler ProjectHelmChartStatusHandler) {
	statusHandler := &projectHelmChartStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, FromProjectHelmChartHandlerToHandler(statusHandler.sync))
}

func RegisterProjectHelmChartGeneratingHandler(ctx context.Context, controller ProjectHelmChartController, apply apply.Apply,
	condition condition.Cond, name string, handler ProjectHelmChartGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &projectHelmChartGeneratingHandler{
		ProjectHelmChartGeneratingHandler: handler,
		apply:                             apply,
		name:                              name,
		gvk:                               controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	controller.OnChange(ctx, name, statusHandler.Remove)
	RegisterProjectHelmChartStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type projectHelmChartStatusHandler struct {
	client    ProjectHelmChartClient
	condition condition.Cond
	handler   ProjectHelmChartStatusHandler
}

func (a *projectHelmChartStatusHandler) sync(key string, obj *v1alpha1.ProjectHelmChart) (*v1alpha1.ProjectHelmChart, error) {
	if obj == nil {
		return obj, nil
	}

	origStatus := obj.Status.DeepCopy()
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *origStatus.DeepCopy()
	}

	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(&newStatus, "", nil)
		} else {
			a.condition.SetError(&newStatus, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(origStatus, &newStatus) {
		if a.condition != "" {
			// Since status has changed, update the lastUpdatedTime
			a.condition.LastUpdated(&newStatus, time.Now().UTC().Format(time.RFC3339))
		}

		var newErr error
		obj.Status = newStatus
		newObj, newErr := a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
		if newErr == nil {
			obj = newObj
		}
	}
	return obj, err
}

type projectHelmChartGeneratingHandler struct {
	ProjectHelmChartGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *projectHelmChartGeneratingHandler) Remove(key string, obj *v1alpha1.ProjectHelmChart) (*v1alpha1.ProjectHelmChart, error) {
	if obj != nil {
		return obj, nil
	}

	obj = &v1alpha1.ProjectHelmChart{}
	obj.Namespace, obj.Name = kv.RSplit(key, "/")
	obj.SetGroupVersionKind(a.gvk)

	return nil, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects()
}

func (a *projectHelmChartGeneratingHandler) Handle(obj *v1alpha1.ProjectHelmChart, status v1alpha1.ProjectHelmChartStatus) (v1alpha1.ProjectHelmChartStatus, error) {
	if !obj.DeletionTimestamp.IsZero() {
		return status, nil
	}

	objs, newStatus, err := a.ProjectHelmChartGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	return newStatus, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
